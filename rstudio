#!/bin/bash
set -ue

thisdir="$(dirname "${BASH_SOURCE[0]}")"
source "${thisdir}/common"

DIR_RUN=".run"

address="127.0.0.1"
port_min=8000
port_max=8100

help(){
  cat <<EOF
Usage rstudio [start|list|passwd]

Manage RStudio Server sessions in this folder.

Commands:
list   Show the running sessions. This is the default action.
start  Start a new RStudio server session.
stop   Stop a running RStudio server instance.
passwd Set the password to access RStudio.
shell  Start a bash shell in the given running instance
--help Show this help.

To stop a running RStudio session, use 'rstudio list' to find the
PID and then call 'kill PID', (replacing PID)
EOF
}

msg(){
  printf "$@" >&2
  echo >&2
}

list(){
  local verbose=
  while [ $# -gt 0 ]; do
    c="$1"
    if [ "$c" = "-v" ]; then
      local verbose="yes"
      shift 1
    else
      msg "Wrong usage of 'list' command, see ./rstudio --help"
      exit 1
    fi
  done

  shopt -s nullglob
  pidfiles=("$DIR_RUN"/rstudio-*.pid)
  shopt -u nullglob
  if [ ${#pidfiles[@]} = 0 ]; then
    msg "\nNo RStudio sessions running in this directory.\n"
    return 0
  fi
  
  if [ "$verbose" = "yes" ]; then
    local fmt="%2s %6s %16s %20s %20s %s\n"
    printf "$fmt" "ID" "PID" "instance" "address" "hostname" ""
  else
    local fmt="%2s %20s %20s %s\n"
    printf "$fmt" "ID" "address" "hostname" ""
  fi
  for f in "${pidfiles[@]}"; do
    id="${f:${#DIR_RUN}:-4}" # strip off directory name and ".pid"
    id="${id:9}" # strip off "/rstudio-"
    { read PID; read instancename; read address; read hostname; } < "$f"
    defunct=""
    # If the instance runs on this machine, test if it is functional
    if [ "$(uname -n)" = "$hostname" ]; then
      if ! kill -s 0 "$PID" 2>/dev/null; then defunct="(PID MISSING)"; fi
      x="$(singularity instance list "$instancename" | wc -l)"
      if [ "$x" -lt 2 ]; then defunct="(INSTANCE MISSING)"; fi
    fi

    if [ "$verbose" = "yes" ]; then 
      printf "$fmt" "$id" "$PID" "$instancename" "$address" "$hostname" "$defunct"
    else
      printf "$fmt" "$id" "$address" "$hostname" "$defunct"
    fi
  done
}

# Returns values by SETTING GLOBAL VARIABLES:
#   id, pidfile, PID, instancename, address, hostname
#
get_instance_by_id(){
  id="$1"
  pidfile="$DIR_RUN/rstudio-${id}.pid"
  if [ ! -f "$pidfile" ]; then 
    msg ""
    msg "RStudio instance with ID '$id' not found. Run ./rstudio list"
    msg "for a list of running instances."
    msg ""
    exit 1
  fi
  { read PID; read instancename; read address; read hostname; } < "$pidfile"

  # If the instance does not run on this machine, we cannot stop it
  if [ "$(uname -n)" != "$hostname" ]; then
    msg ""
    msg "This instance is not running on this machine."
    msg "%-20s %s" "This machine:" "$(uname -n)"
    msg "%-20s %s" "Instance $id runs on:" "$hostname"
    msg ""
    exit 1
  fi
}

stop(){

  if [ "${1-}" == "--help" ]; then
    msg "Usage: rstudio stop <ID>"
    msg ""
    msg "Stop the RStudio instance given by <ID>."
    msg "Run './rstudio list' to get a list of all running instances"
    msg "and their IDs."
    msg ""
    exit 0
  fi

  if [ ! $# = 1 ]; then
    msg "Usage: rstudio stop <ID>"
    msg "use --help for more info."
    exit 1
  fi

  get_instance_by_id "$1"

  singularity instance stop "$instancename"
}

shell(){

  if [ "${1-}" == "--help" ]; then
    msg "Usage: rstudio shell <ID>"
    msg ""
    msg "In the running RStudio container with ID <ID>, launch an"
    msg "interactive bash shell (bash -l)."
    msg "Run './rstudio list' to get a list of all running instances"
    msg "and their IDs."
    msg ""
    exit 0
  fi

  if [ ! $# = 1 ]; then
    msg "Usage: rstudio shell <ID>"
    msg "use --help for more info."
    exit 1
  fi

  get_instance_by_id "$1"

  singularity exec "instance://$instancename" bash -l
}


rstudio_passwd(){
  if [ ! $# = 0 ]; then
    msg "Usage: rstudio passwd"
    msg "use --help for more info."
    exit 1
  fi
  "./cexec" /usr/lib/rstudio-server/bin/rstudio_passwd "$@"
}

make_temp(){
  local tmpdir="$(mktemp -d -t rstudio-XXXXXXXX)"
  # We delete this directory afterwards, so its important that $tmpdir
  # really has the path to an empty, temporary dir, and nothing else!
  # (for example empty string or home dir)
  if [[ ! "$tmpdir" || ! -d "$tmpdir" ]]; then
    echo "Error: Could not create temp dir $tmpdir"
    exit 1
  fi
  
  # check if temp dir is empty
  tmpcontent="$(ls -A "$tmpdir")"
  if [ ! -z "$tmpcontent" ]; then
    echo "Error: Temp dir '$tmpdir' is not empty"
    exit 1
  fi
  echo "$tmpdir"
}

start(){
  if [ ! $# = 0 ]; then
    msg "Usage: rstudio start"
    msg "use --help for more info."
    exit 1
  fi
  logfile="/dev/null"
  if [ "${1-}" = "--log" ]; then 
    logfile="$2"
    msg "logging to $logfile"
  fi

  if [[ ! -e ".rstudio-passwd" || 
    "$(cat ".rstudio-passwd" | wc -l)" = 0 ]]; then
    cat <<EOF
  
  You need to set a password for RStudio first! You can do this at any time
  by calling ./rstudio passwd
  
EOF
    echo -n "Do you want to set the RStudio password now? [y/N] " >&2
    read answer
    if [[ $answer =~ [yY] ]]; then
      rstudio_passwd
    else
      exit 1
    fi
  fi
  
  # Create a temporary directory
  tmpdir="$(make_temp)"
  
  #port=$("$thisdir/cexec" find_port "$address" "$port_min" "$port_max")
  port=$(singularity -s exec "$CONTAINER" /usr/bin/find_port "$address" "$port_min" "$port_max")
  msg ""
  msg "Access RStudio Server on http://$address:$port"
  msg ""
  msg "To log in to RStudio, use your user name and the"
  msg "RStudio password for this project."
  msg "Call './rstudio passwd' to change the RStudio password."
  
  # Start Singularity instance
  local id=1
  while [ -e "$DIR_RUN/rstudio-${id}.pid" ]; do let "id=id+1"; done
  instancename="$(basename "$tmpdir")"
  mkdir -p "$DIR_RUN"
  runfile="$DIR_RUN/rstudio-$id.pid"
  rundir="$DIR_RUN/${id}.rstudio"
  
  mkdir "$rundir"

  (
    singularity instance start \
      -W "$tmpdir" \
      -B "$tmpdir:/var/run" \
	    -B "$rundir:$MOUNT_PROJECT/.rstudio" \
      "${ARGS_INSTANCE[@]}" \
      "$CONTAINER" \
      "$instancename"
    
    # Delete the temporary directory after the end of the script
    cleanup(){
      singularity instance stop "$instancename"
      rm -rf "$tmpdir"
	    rm -rf "$rundir"
      if [ -f "$runfile" ]; then rm "$runfile"; fi
    }
    trap cleanup EXIT
    trap "echo caught SIGHUP" HUP
    
    # Save PID and other infos
    pid=$BASHPID
    hostname="$(uname -n)"
    cat <<EOF >"$runfile"
$pid
$instancename
$address:$port
$hostname
EOF
  
    # log error code
    set +e 

    SINGULARITYENV_RSTUDIO_PASSWORD_FILE="$MOUNT_PROJECT/.rstudio-passwd" \
    singularity exec \
      "${ARGS_EXEC[@]}" \
      "instance://$instancename" \
        rserver \
        --www-address $address \
        --www-port $port \
        --auth-none 0 \
        --server-daemonize=no \
        --auth-pam-helper rstudio_auth_file
    code=$?
    if [ ! $code = 0 ]; then
      msg "rserver exited with code $code"
    fi
    return $code

    ) </dev/null &>"$logfile" &
    disown $!
  
}

# Basic test whether the current directory is the project dir
# should have a script named "rstudio" that calls this script
if [ ! -f "rstudio" ]; then
  echo "Error: Please call this script from your project directory" >&2
  exit 1
fi

if [ $# = 0 ]; then
  msg ""
  msg "Available commands: "
  msg "  list, start, stop, passwd."
  msg ""
  msg "Type ./rstudio --help' for more info."
  msg ""
  exit 1
else
  cmd="$1"
  shift
fi

case $cmd in 
  list)   list "$@"; ;;
  start)  start "$@"; ;;
  stop)   stop "$@"; ;;
  passwd) rstudio_passwd; ;;
  shell)  shell "$@"; ;;
  --help) help; ;;
  *) msg "Unknown argument. Use --help to show the help for this command"
esac


